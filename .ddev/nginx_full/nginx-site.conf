# ddev default (PHP project type) config
# If you want to take over this file and customize it, remove the line above
# and ddev will respect it and won't overwrite the file.
# See https://ddev.readthedocs.io/en/stable/users/extend/customization-extendibility/#providing-custom-nginx-configuration

map $args $static_page_root {
    default                                 /var/tmp/pages;
    "~*(^|&)pimcore_editmode=true(&|$)"     /var/nonexistent;
    "~*(^|&)pimcore_preview=true(&|$)"      /var/nonexistent;
    "~*(^|&)pimcore_version=[^&]+(&|$)"     /var/nonexistent;
}

map $uri $static_page_uri {
    default                                 $uri;
    "/"                                     /%home;
}

server {
    listen 80 default_server;
    listen 443 ssl default_server;

    root /var/www/html/public;

    ssl_certificate /etc/ssl/certs/master.crt;
    ssl_certificate_key /etc/ssl/certs/master.key;

    include /etc/nginx/monitoring.conf;

    index index.php index.htm index.html;
    client_max_body_size 100m;

    # Disable sendfile as per https://docs.vagrantup.com/v2/synced-folders/virtualbox.html
    sendfile off;
    error_log /dev/stdout info;
    access_log /var/log/nginx/access.log;

    location / {
       error_page 404 /meta/404;
       try_files $static_page_root$static_page_uri.html $uri /index.php$is_args$args;
    }

     # Use this location when the installer has to be run
    # location ~ /(index|install)\.php(/|$) {
    #
    # Use this after initial install is done:
    location ~ ^/index\.php(/|$) {
        send_timeout 1800;
        fastcgi_read_timeout 1800;
        # regex to split $uri to $fastcgi_script_name and $fastcgi_path_info
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        # Check that the PHP script exists before passing it
        try_files $fastcgi_script_name =404;
        # include fastcgi.conf if needed
        # Bypass the fact that try_files resets $fastcgi_path_info
        # see: http://trac.nginx.org/nginx/ticket/321
        set $path_info $fastcgi_path_info;
        fastcgi_param PATH_INFO $path_info;
        fastcgi_param SERVER_NAME $host;
        fastcgi_param HTTPS $fcgi_https;
        fastcgi_buffers 16 16k;
        fastcgi_buffer_size 32k;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param SCRIPT_NAME $fastcgi_script_name;
        fastcgi_index index.php;
        fastcgi_intercept_errors off;
        fastcgi_param SERVER_NAME $host;
        fastcgi_param HTTPS $fcgi_https;
        # Activate these, if using Symlinks and opcache
        fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
        fastcgi_param DOCUMENT_ROOT $realpath_root;

        fastcgi_pass unix:/run/php-fpm.sock;
        # Prevents URIs that include the front controller. This will 404:
        # http://domain.tld/index.php/some-path
        # Remove the internal directive to allow URIs like this
        internal;
    }

        # PHP-FPM Status and Ping
        location /fpm- {
            access_log off;
            include fastcgi_params;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            location /fpm-status {
                allow 127.0.0.1;
                # add additional IP's or Ranges
                deny all;
                fastcgi_pass unix:/run/php-fpm.sock;
            }
            location /fpm-ping {
                fastcgi_pass unix:/run/php-fpm.sock;
            }
        }

# Protected Assets
        #
        ### 1. Option - Restricting access to certain assets completely
        #
        # location ~ ^/protected/.* {
        #   return 403;
        # }
        # location ~ ^/var/.*/protected(.*) {
        #   return 403;
        # }
        #
        # location ~ ^/cache-buster\-[\d]+/protected(.*) {
        #   return 403;
        # }
        #
        ### 2. Option - Checking permissions before delivery
        #
        # rewrite ^(/protected/.*) /index.php$is_args$args last;
        #
        # location ~ ^/var/.*/protected(.*) {
        #   return 403;
        # }
        #
        # location ~ ^/cache-buster\-[\d]+/protected(.*) {
        #   return 403;
        # }

        # Pimcore Head-Link Cache-Busting
        rewrite ^/cache-buster-(?:\d+)/(.*) /$1 last;

        # Stay secure
        #
        # a) don't allow PHP in folders allowing file uploads
        location ~* /var/assets/.*\.php(/|$) {
            return 404;
        }
        # b) Prevent clients from accessing hidden files (starting with a dot)
        # Access to `/.well-known/` is allowed.
        # https://www.mnot.net/blog/2010/04/07/well-known
        # https://tools.ietf.org/html/rfc5785
        location ~* /\.(?!well-known/) {
            deny all;
            log_not_found off;
            access_log off;
        }
        # c) Prevent clients from accessing to backup/config/source files
        location ~* (?:\.(?:bak|conf(ig)?|dist|fla|in[ci]|log|psd|sh|sql|sw[op])|~)$ {
            deny all;
        }

        # Some Admin Modules need this:
        # Database Admin, Server Info
        location ~* ^/admin/(adminer|external) {
            rewrite .* /index.php$is_args$args last;
        }

        # Thumbnails
        location ~* .*/(image|video)-thumb__\d+__.* {
            try_files /var/tmp/thumbnails$uri /index.php;
            expires 2w;
            access_log off;
            add_header Cache-Control "public";
        }

        # Assets
        # Still use a whitelist approach to prevent each and every missing asset to go through the PHP Engine.
        location ~* ^(?!/admin)(.+?)\.((?:css|js)(?:\.map)?|jpe?g|gif|png|svgz?|eps|exe|gz|zip|mp\d|m4a|ogg|ogv|webm|pdf|docx?|xlsx?|pptx?)$ {
            try_files /var/assets$uri $uri =404;
            expires 2w;
            access_log off;
            log_not_found off;
            add_header Cache-Control "public";
        }

        # nginx Status
        # see: https://nginx.org/en/docs/http/ngx_http_stub_status_module.html
        location /nginx-status {
            allow 127.0.0.1;
            deny all;
            access_log off;
            stub_status;
        }

    # Prevent clients from accessing hidden files (starting with a dot)
    # This is particularly important if you store .htpasswd files in the site hierarchy
    # Access to `/.well-known/` is allowed.
    # https://www.mnot.net/blog/2010/04/07/well-known
    # https://tools.ietf.org/html/rfc5785
    location ~* /\.(?!well-known\/) {
        deny all;
    }

    # Prevent clients from accessing to backup/config/source files
    location ~* (?:\.(?:bak|conf|dist|fla|in[ci]|log|psd|sh|sql|sw[op])|~)$ {
        deny all;
    }

    include /etc/nginx/common.d/*.conf;
    include /mnt/ddev_config/nginx/*.conf;

}
